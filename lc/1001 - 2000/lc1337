from typing import List


class Solution:
    # 方法一：
    #   娱乐
    def kWeakestRows1(self, mat: List[List[int]], k: int) -> List[int]:
        return sorted([i for i in range(len(mat))], key=lambda x: sum(mat[x]))[:k]

    # 方法二：
    #   二分 + 排序
    #
    # 思路：
    #   利用二分，计算每行士兵的数量，然后排序
    #
    # 时间复杂度：
    #   O(mlog(max(m,n)))
    #
    # 空间复杂度：
    #   O(m)，不考虑排序

    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        cnt = []
        for i in range(len(mat)):
            low, high, row = -1, len(mat[i]), mat[i]
            while low+1 < high:
                mid = (low+high) >> 1
                if row[mid] == 1:
                    low = mid
                else:
                    high = mid
            cnt.append([low+1, i])
        cnt.sort()
        return [item[1] for item in cnt[:k]]
