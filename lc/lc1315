from typing import List


class Solution:
    # 方法一：
    #   枚举
    #
    # 思路：
    #   枚举所有元素
    #
    # 时间复杂度：
    #   O(mn)
    #
    # 空间复杂度：
    #   O(1)
    def countNegatives1(self, grid: List[List[int]]) -> int:
        cnt = 0
        for i in grid:
            for j in i:
                if j < 0:
                    cnt += 1
        return cnt

    # 方法二：
    #   二分
    #
    # 思路：
    #   利用每一行递减的信息
    #   遍历每一行，二分查找每一行中负数的元素数
    #
    # 时间复杂度：
    #   O(mlogn)
    #
    # 空间复杂度：
    #   O(1)
    def countNegatives2(self, grid: List[List[int]]) -> int:
        cnt = 0
        for i in grid:
            low, high = -1, len(i)
            while (low+1 < high):
                mid = low + (high-low)//2
                if i[mid] >= 0:
                    low = mid
                else:
                    high = mid
            cnt += len(i)-(low+1)
        return cnt

    # 方法三：
    #   倒序遍历
    #
    # 思路：
    #   利用每一行，每一列都递减的条件
    #   正数和负数的分界线从右上角遍历到左下角
    #
    # 时间复杂度：
    #   O(m+n)
    #
    # 空间复杂度：
    #   O(1)
    def countNegatives(self, grid: List[List[int]]) -> int:
        cnt, i, j = 0, 0, len(grid[0])-1
        while i < len(grid) and j >= 0:
            if grid[i][j] >= 0:
                i += 1
            else:
                cnt += len(grid)-i
                j -= 1
        return cnt
