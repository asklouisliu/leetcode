from typing import List
from collections import Counter


class Solution:
    # 方法一：
    #   哈希
    #
    # 思路：
    #   计算长度较小数组的词频
    #
    # 时间复杂度：
    #   O(m+n)
    #
    # 空间复杂度：
    #   O(min(m,n))
    def intersect1(self, nums1: List[int], nums2: List[int]) -> List[int]:
        if len(nums1) > len(nums2):
            self.intersect1(nums2, nums1)
        res, cnt = [], Counter(nums1)
        for n in nums2:
            if cnt[n] > 0:
                res.append(n)
                cnt[n] -= 1
        return res

    # 方法二：
    #   排序 + 双指针
    #
    # 思路：
    #   先排序两个数组，然后再从头遍历
    #
    # 时间复杂度：
    #   O(mlogm+nlogn)
    #
    # 空间复杂度：
    #   O(mlogm+nlogn)
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1.sort()
        nums2.sort()
        res, index1, index2 = [], 0, 0
        while index1 < len(nums1) and index2 < len(nums2):
            if nums1[index1] < nums2[index2]:
                index1 += 1
            elif nums1[index1] > nums2[index2]:
                index2 += 1
            else:
                res.append(nums1[index1])
                index1 += 1
                index2 += 1
        return res
